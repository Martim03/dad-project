package dadkvs.server;

/* these imported classes are generated by the contract */
// import java.awt.color.ICC_Profile;
// import java.lang.classfile.instruction.ThrowInstruction;
import java.util.ArrayList;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import dadkvs.DadkvsMain;
import dadkvs.DadkvsMainServiceGrpc;
import dadkvs.DadkvsStep1;
import dadkvs.DadkvsStep1ServiceGrpc;
import dadkvs.util.CollectorStreamObserver;
import dadkvs.util.GenericResponseCollector;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

public class DadkvsMainServiceImpl extends DadkvsMainServiceGrpc.DadkvsMainServiceImplBase {

    DadkvsServerState server_state;
    int timestamp;
    CommitHandler commitHandler;
    int request_counter;
    int server_number;
    ManagedChannel[] channels;
    DadkvsStep1ServiceGrpc.DadkvsStep1ServiceStub[] async_stubs;
    private ReadWriteLock rwLock = new ReentrantReadWriteLock();

    public DadkvsMainServiceImpl(DadkvsServerState state, CommitHandler handler) {
        this.server_state = state;
        this.timestamp = 0;
        this.request_counter = 0;
        this.commitHandler = handler;
        this.server_number = 4;
        this.channels = new ManagedChannel[this.server_number];
        this.async_stubs = new DadkvsStep1ServiceGrpc.DadkvsStep1ServiceStub[this.server_number];
        startComms();

    }

    @Override
    public void read(DadkvsMain.ReadRequest request, StreamObserver<DadkvsMain.ReadReply> responseObserver) {
        // for debug purposesd
        System.out.println("Receiving read request:" + request);

        int reqid = request.getReqid();
        int key = request.getKey();
        VersionedValue vv = this.server_state.store.read(key);

        DadkvsMain.ReadReply response = DadkvsMain.ReadReply.newBuilder()
                .setReqid(reqid).setValue(vv.getValue()).setTimestamp(vv.getVersion()).build();

        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void committx(DadkvsMain.CommitRequest request, StreamObserver<DadkvsMain.CommitReply> responseObserver) {

        // for debug purposes
        System.out.println("Receiving commit request:" + request);

        int reqid = request.getReqid();
        int key1 = request.getKey1();
        int version1 = request.getVersion1();
        int key2 = request.getKey2();
        int version2 = request.getVersion2();
        int writekey = request.getWritekey();
        int writeval = request.getWriteval();

        // for debug purposes
        System.out.println("receiving:\n reqid " + reqid + " key1 " + key1 + " v1 " + version1 + " k2 " + key2 + " v2 " + version2 + " wk " + writekey + " writeval " + writeval);
        commitHandler.addRequest(request);

        rwLock.writeLock().lock();
        DadkvsStep1.commitOrderRequest.Builder commit_request;
        try {
            if (server_state.i_am_leader == true) {
                commit_request = DadkvsStep1.commitOrderRequest.newBuilder();
                commit_request.setReqid(reqid).setOrderNum(this.request_counter);
            }
            this.request_counter++;
        } finally {
            rwLock.writeLock().unlock();
        }

        if (server_state.i_am_leader == true) {
            //necessario criar os targets de port com host
            ArrayList<DadkvsStep1.commitOrderReply> commit_responses = new ArrayList<>();
            GenericResponseCollector<DadkvsStep1.commitOrderReply> commit_collector = new GenericResponseCollector<>(commit_responses, this.server_number);
            CollectorStreamObserver<DadkvsStep1.commitOrderReply> commit_observer = new CollectorStreamObserver<>(commit_collector);

            for (int i = 0; i < this.server_number; i++) {
                this.async_stubs[i].commitorder(commit_request.build(), commit_observer);
            }
            commit_collector.waitForTarget(this.server_number);
        }
    }

    public void startComms() {
        String host = "localhost";
        int port = 8080;

        for (int i = 0; i <= this.server_number; i++) {
            String target = host + ":" + Integer.toString(port + i);
            channels[i] = ManagedChannelBuilder.forTarget(target).usePlaintext().build();
            async_stubs[i] = DadkvsStep1ServiceGrpc.newStub(channels[i]);
        }
    }
}
